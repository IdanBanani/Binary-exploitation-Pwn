pwn.context.terminal = ["tmux", " splitw"]

breakrva addr
binascii.a2b_hex

strings in decompiler
flow in dissasmbler

cyclic -l stringToserachAndReturnOffset
info functions
run < payload.txt

info(%#x target,elf.symbols.ret2win)

io.wait() - wait for the application to crash
core = io.corefile
eip_Value = core.eip
eip_offset = cyclic_find(eip_value)
asm('nop')
payload = flat(x,y,z)

io = start()  ---> start the program(binary)
pattern = core.read(core.rsp,4)
payload = fit({pattern : elf.symbols.ret2win}) # create a new payload which puts the target
                                                 at the correct offset

pwn.cyclic_find(pattern,n=num of bytes)
                                                 
gdb:
init-peda

peda:
pattern_search

radare
rabin -i filename (import)

rabin -qs file | grep -ve imp -e ' 0 ' [interesting functions]

rabin2 -z file [programmer strings]

radate2 filename
s sym.
pdd
s sym.symbolname
pdd = dissassemble

set context-sections regs disasm args code stack backtrace
context-stack-lines, context-code-lines
dumpargs (Context: showing function args)
entry - break at first executed instruction
nextjump
nextsyscall
nextret
stepjump
stepret
vmmap = gdb's info proc mappings
proc info
set emulate off/on (Emulates code up to the closest branch/call)